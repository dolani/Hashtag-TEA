{"version":3,"sources":["logo.png","Home.js","Footer.js","About.js","Nav.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","useState","data","setData","comment","setComment","URL","fetchData","a","fetch","res","json","useEffect","className","map","tea","key","_id","name","src","image","alt","description","origin","brew_time","temperature","comments","text","onChange","e","target","value","placeholder","id","onClick","inputElem","parentNode","firstChild","trim","alert","console","log","requestOptions","method","headers","body","JSON","stringify","then","response","postComment","Footer","icon","faHeart","href","About","Nav","logo","to","faHome","faInfoCircle","TwitterShareButton","title","url","hashtags","faShare","App","path","exact","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","process","addEventListener","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.78458305.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.a9efc4ef.png\";","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\n\nexport default function Home() {\n  const [data, setData] = useState([]);\n  const [comment, setComment] = useState(\"\");\n  const URL = \"https://tea-api-vic-lo.herokuapp.com/\";\n\n  const fetchData = async () => {\n    const res = await fetch(`${URL}tea`);\n    const json = await res.json();\n    setData(json);\n  };\n\n  const postComment = (e) => {\n    const tea = e.target.id;\n    const inputElem = e.target.parentNode.firstChild;\n    if (inputElem.value.trim() === \"\") {\n      alert(\"There's no comment to post\");\n    } else {\n      inputElem.value = \"\";\n      console.log(`Tea: ${tea} and comment: ${comment}`);\n\n      const requestOptions = {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ comment: comment }),\n      };\n      fetch(`${URL}tea/${tea}`, requestOptions)\n        .then((response) => response.json())\n        .then(fetchData);\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const loadData = (tea) => {\n    return (\n      <div key={tea._id} className=\"panel\">\n        <div className=\"name\">{`#${tea.name}Tea`}</div>\n        <img\n          className=\"tea-img\"\n          src={`${URL}${tea.image}`}\n          alt={`${URL}+${tea.image}`}\n        />\n        <div className=\"content\">\n          <p>{tea.description}</p>\n          <p>{`Origin: ${tea.origin}`}</p>\n          <p>{`Brew Time: ${tea.brew_time}min`}</p>\n          <p>{`Temperature: ${tea.temperature}Â°C`}</p>\n          <p>{\"Comments: \"}</p>\n          <p>\n            {tea.comments.map((comment) => (\n              <p key={comment._id}>{`\"${comment.text}\"`}</p>\n            ))}\n          </p>\n        </div>\n        <div className=\"form\">\n          <input\n            onChange={(e) => setComment(e.target.value)}\n            className=\"comment\"\n            placeholder=\"Add a comment...\"\n          />\n          <button\n            id={tea.name}\n            className=\"post\"\n            onClick={(e) => postComment(e)}\n          >\n            Post\n          </button>\n        </div>\n      </div>\n    );\n  };\n\n  return <div className=\"display-panel\">{data.map(loadData)}</div>;\n}\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faHeart } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nexport default function Footer() {\r\n  return (\r\n    <div className=\"footer\">\r\n      Made with <FontAwesomeIcon icon={faHeart} /> by{\" \"}\r\n      <a href=\"https://github.com/victoria-lo/Hashtag-TEA\">Victoria Lo</a>.\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\nimport './App.css';\n\nexport default function About() {\n  return (\n    <div className=\"about-container\">\n      <h1>Welcome to #TEA!</h1>\n      <p>This is a simple PWA showcasing how the <a href=\"https://tea-api-vic-lo.herokuapp.com\">Tea API</a> can be used.<br/>\n      <br/>For more information, visit  <a href=\"https://lo-victoria.com\">my blog</a> for tutorials on how to make a Node.js REST API <br/>for beginners and how to make this PWA using your own API.<br/>\n      <br/>Thanks for visiting! Feel free to browse the tea, post a nice comment about it and share this <br/>simple PWA with your friends. Hope you love tea~</p>\n    </div>\n  );\n}\n","import React from \"react\";\r\nimport logo from \"./logo.png\";\r\nimport \"./App.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faInfoCircle,\r\n  faHome,\r\n  faShare,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { TwitterShareButton } from \"react-share\";\r\n\r\nexport default function Nav() {\r\n  const shareUrl = \"https://victoria-lo.github.io/Hashtag-TEA\";\r\n  const hashtag = [\r\n    \"PWA\",\r\n    \"WebDevelopment\",\r\n    \"Javascript\",\r\n    \"React\",\r\n    \"API\",\r\n    \"Tea\",\r\n  ];\r\n  return (\r\n    <header className=\"App-header\">\r\n      <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n      <p className=\"tag\">A simple PWA for Tea Lovers~</p>\r\n      <span className=\"icons\">\r\n        <Link to=\"/Hashtag-TEA\">\r\n          <i>\r\n            <FontAwesomeIcon icon={faHome} />\r\n          </i>\r\n        </Link>\r\n        <Link to=\"/Hashtag-TEA/about\">\r\n          <i>\r\n            <FontAwesomeIcon icon={faInfoCircle} />\r\n          </i>\r\n        </Link>\r\n        <i>\r\n          <TwitterShareButton\r\n            title=\"Here's a cool PWA I found made by @lo_victoria2666!\"\r\n            url={shareUrl}\r\n            hashtags={hashtag}\r\n          >\r\n            <FontAwesomeIcon icon={faShare} />\r\n          </TwitterShareButton>\r\n        </i>\r\n      </span>\r\n    </header>\r\n  );\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Home from \"./Home\";\nimport Footer from \"./Footer\";\nimport About from \"./About\";\nimport Nav from \"./Nav\";\n\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nexport default function App() {\n  return (\n    <Router>\n      <div>\n        <Nav />\n        <Switch>\n          <Route path=\"/Hashtag-TEA\" exact component={Home} />\n          <Route path=\"/Hashtag-TEA/about\" component={About} />\n        </Switch>\n        <Footer />\n      </div>\n    </Router>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}